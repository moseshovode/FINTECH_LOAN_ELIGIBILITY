# -*- coding: utf-8 -*-
"""FINTECH LOAN ELIGIBILITY(Streamlit).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WKVQXE6VXnuvNqhH_U-H5wnDeYBOlGsF
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import linregress
import random

# --- 1. Simulate Fintech Transaction Data ---
# (Keep the generate_user_data function as is)
def generate_user_data(user_id, num_months=12):
    dates = pd.date_date_range(end='2024-12-31', periods=num_months, freq='ME')

    # Simulate varying cash inflows
    if user_id % 3 == 0:  # Downtrend
        inflows = [random.randint(2000, 5000) - (i * 150) for i in range(num_months)]
    elif user_id % 3 == 1:  # Uptrend
        inflows = [random.randint(1000, 3000) + (i * 200) for i in range(num_months)]
    else:  # Moderate/Stable
        inflows = [random.randint(2500, 4500) + (i * 50) for i in range(num_months)]

    inflows = [max(500, x) for x in inflows]  # Ensure no negative inflows
    balances = [sum(inflows[:i + 1]) - random.randint(500, 1500) for i in range(num_months)]  # Simple balance
    balances = [max(100, x) for x in balances]

    data = {
        'user_id': [f'user {user_id}'] * num_months,
        'transaction_date': dates,
        'cash_inflow_month': inflows,
        'current_balance': balances
    }
    return pd.DataFrame(data)


# --- 2. Generate data for 10 users ---
all_user_data = []
for i in range(1, 11):
    all_user_data.append(generate_user_data(i, num_months=12))

data = pd.concat(all_user_data).reset_index(drop=True)
data['user_id'] = data['user_id'].str.lower()


# --- 3. Loan Eligibility Function ---
# (Keep the assess_loan_eligibility function as is)
def assess_loan_eligibility(customer_name, loan_amount, transaction_data):
    """
    Assesses loan eligibility based on cash inflow trend using a probabilistic approach.

    Args:
        customer_name (str): The ID of the customer requesting the loan.
        loan_amount (float): The desired loan amount.
        transaction_data (pd.DataFrame): DataFrame containing user transaction records.

    Returns:
        dict: A dictionary with eligibility details.
    """
    user_data = transaction_data[transaction_data['user_id'] == customer_name].sort_values(by='transaction_date')

    if user_data.empty:
        return {
            'eligible': False,
            'message': f"Customer '{customer_name}' not found in records.",
            'trend': 'N/A',
            'probability_of_approval': 0.0,
            'plot_generated': False
        }

    # Extract cash inflows and convert dates to numerical representation (e.g., months from start)
    # Using np.arange for months to represent time for linear regression
    x = np.arange(len(user_data))
    y = user_data['cash_inflow_month'].values

    # Perform linear regression to find the slope
    slope, intercept, r_value, p_value, std_err = linregress(x, y)

    # --- Trend Categorization and Probabilistic Assignment ---
    # Define thresholds for slope and corresponding probabilities
    # These thresholds and probabilities are illustrative and should be fine-tuned with real data and risk models
    if slope > 100:  # Strong uptrend (e.g., cash inflow increasing by more than 100 units per month)
        trend = "Strong Uptrend"
        probability_of_approval = 0.95
    elif slope > 20: # Moderate uptrend
        trend = "Moderate Uptrend"
        probability_of_approval = 0.75
    elif slope > -20: # Stable/Slightly fluctuating
        trend = "Stable"
        probability_of_approval = 0.50
    elif slope > -100: # Moderate downtrend
        trend = "Moderate Downtrend"
        probability_of_approval = 0.20
    else: # Strong downtrend
        trend = "Strong Downtrend"
        probability_of_approval = 0.05 # Very low chance

    # --- Loan Amount Consideration ---
    # This is a simple rule: Loan amount should not exceed X times their average monthly inflow.
    average_monthly_inflow = user_data['cash_inflow_month'].mean()
    max_loan_based_on_inflow = average_monthly_inflow * 3 # Example: Max loan is 3x average monthly inflow

    eligible_for_amount = (loan_amount <= max_loan_based_on_inflow)

    # Adjust probability based on loan amount requested (e.g., if too high, reduce probability)
    if not eligible_for_amount:
        # If the requested amount is too high, significantly reduce probability of approval
        probability_of_approval *= 0.1
        final_eligibility_message = f"Requested loan amount (${loan_amount:,.2f}) is too high relative to average inflow (${average_monthly_inflow:,.2f}). Max recommended: ${max_loan_based_on_inflow:,.2f}. "
    else:
        final_eligibility_message = ""


    # --- Final Eligibility Decision based on Probability ---
    # We can set a general probability threshold for final "eligible" flag
    if probability_of_approval >= 0.60: # If probability is 60% or more, consider eligible
        eligible = True
        final_eligibility_message += "Likely eligible for loan."
    else:
        eligible = False
        final_eligibility_message += "Unlikely to be eligible for loan."

    # --- Plotting the Trend ---
    fig, ax = plt.subplots(figsize=(8, 4)) # Create figure and axes
    ax.plot(user_data['transaction_date'], y, marker='o', linestyle='-', color='skyblue', label='Monthly Cash Inflow')
    ax.plot(user_data['transaction_date'], intercept + slope * x, color='red', linestyle='--', label=f'Trend Line (Slope: {slope:.2f})')
    ax.set_title(f'Cash Inflow Trend for {customer_name}')
    ax.set_xlabel('Date')
    ax.set_ylabel('Cash Inflow (NGN)')
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    # Use st.pyplot to display the plot in Streamlit
    st.pyplot(fig)


    return {
        'eligible': eligible,
        'message': final_eligibility_message,
        'trend': trend,
        'calculated_slope': slope,
        'average_monthly_inflow': average_monthly_inflow,
        'max_recommended_loan': max_loan_based_on_inflow,
        'probability_of_approval': probability_of_approval,
        'plot_generated': True
    }


# --- Streamlit App Layout ---
st.title("Fintech Loan Eligibility Assessor")

st.write("Enter customer details to assess loan eligibility.")

customer_id_input_raw = st.text_input("Enter Customer ID (e.g., 'user 1')")
loan_amount_input = st.number_input("Enter Desired Loan Amount", min_value=0.0, value=5000.0, step=100.0)

if st.button("Assess Eligibility"):
    if customer_id_input_raw:
        customer_id_input = customer_id_input_raw.lower()

        # Check if the customer ID exists in the data (case-insensitive)
        if customer_id_input not in data['user_id'].unique():
             st.error(f"Customer ID '{customer_id_input_raw}' not found. Please check the ID and try again.")
        else:
            # Run the eligibility check with user input
            user_loan_result = assess_loan_eligibility(customer_id_input, loan_amount_input, data)

            st.subheader("Loan Request Details:")
            st.write(f"Customer: {customer_id_input_raw}, Requested Loan Amount: NGN {loan_amount_input:,.2f}")
            st.write(f"Eligibility: {'Yes' if user_loan_result['eligible'] else 'No'}")
            st.write(f"Trend: {user_loan_result['trend']} (Slope: {user_loan_result['calculated_slope']:.2f})" if user_loan_result['plot_generated'] else "Trend: N/A")
            st.write(f"Probability of Approval: {user_loan_result['probability_of_approval']:.2%}" if user_loan_result['plot_generated'] else "Probability of Approval: N/A")
            st.write(f"Message: {user_loan_result['message']}")

    else:
        st.warning("Please enter a customer ID.")